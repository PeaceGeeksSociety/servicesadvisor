<?php
/**
 * @file
 * Code for the Services Advisor Location feature.
 */

include_once 'services_advisor_location.features.inc';

/**
 * Implements hook_cron_queue_info().
 */
function services_advisor_location_cron_queue_info() {
  $queues['service_location_title_queue'] = array(
    'worker callback' => 'services_advisor_location_title_runner'
  );

  return $queues;
}

/**
 * Implements hook_sa_settings_form().
 *
 * @see services_advisor_base_settings_form().
 */
function services_advisor_location_sa_settings_form($form, &$form_state) {
  $map_settings = variable_get('services_advisor_location_default_map_settings', array(
    'lat' => 31.95,
    'lng' => 35.583,
    'zoom' => 9
  ));

  $form['services_advisor_location_default_map_settings'] = array(
    '#type' => 'fieldset',
    '#collapsible' => true,
    '#tree' => true,
    '#title' => t('Map Widget Defaults')
  );
  $form['services_advisor_location_default_map_settings']['lat'] = array(
    '#type' => 'textfield',
    '#title' => t('Default Latitude'),
    '#required' => true,
    '#default_value' => $map_settings['lat'],
    '#element_validate' => array('element_validate_number')
  );
  $form['services_advisor_location_default_map_settings']['lng'] = array(
    '#type' => 'textfield',
    '#title' => t('Default Longitude'),
    '#required' => true,
    '#default_value' => $map_settings['lng'],
    '#element_validate' => array('element_validate_number')
  );
  $form['services_advisor_location_default_map_settings']['zoom'] = array(
    '#type' => 'textfield',
    '#title' => t('Default Zoom'),
    '#required' => true,
    '#default_value' => $map_settings['zoom'],
    '#element_validate' => array('element_validate_number')
  );

  return $form;
}

/**
 * Implements hook_form_alter().
 */
function services_advisor_location_form_service_location_node_form_alter(&$form, &$form_state) {
  // Hide the title field.
  $form['title']['#value'] = 'Services Advisor Location';
  $form['title']['#type'] = 'value';
  $form['title']['#required'] = FALSE;

  // Add logic for og_group_ref field.
  services_advisor_location_og_group_ref_handling($form, $form_state);

  $form['#validate'][] = 'services_advisor_location_location_date_validate';

  $term_ref_field_name = 'field_service_location_location';
  $term_geofield = 'field_location_area';
  ___inject_service_location_areas_map_js($form, $form_state, $term_ref_field_name, $term_geofield);
}

function ___inject_service_location_areas_map_js(&$form, &$form_state, $term_ref_field, $term_geofield) {
  $field_settings = $form_state['field'][$term_ref_field][LANGUAGE_NONE]['field']['settings'];
  $allowed_values = $field_settings['allowed_values'];
  $vocabularies = array_map(
    function ($allowed) {return $allowed['vocabulary'];},
    $allowed_values
  );

  $terms = ___load_taxonomy_terms($vocabularies);
  $term_geodata = array_map(___extract_term_geodata_as_geojson($term_geofield), $terms);

  $map_settings = variable_get('services_advisor_location_default_map_settings', array(
    'lat' => 31.95,
    'lng' => 35.583,
    'zoom' => 9
  ));

  $form['#attached']['js'][] = [
    'type' => 'setting',
    'data' => [
      'service_location_areas' => [
        'areas' => $term_geodata,
        'defaults' => $map_settings
      ]
    ]
  ];
  $form['#attached']['js'][] = drupal_get_path('module', 'services_advisor_location') . '/js/service-location-areas.js';
}

function ___load_taxonomy_terms($vocabularies) {
  $entity_type = 'taxonomy_term';
  $result = (new EntityFieldQuery())
    ->entityCondition('entity_type', $entity_type)
    ->entityCondition('bundle', $vocabularies)
    ->execute();

  $tids = array_keys($result[$entity_type]);
  $terms = taxonomy_term_load_multiple($tids);

  return $terms;
}

function ___extract_term_geodata_as_geojson($geofield) {
  geophp_load();

  return function ($term) use ($geofield) {
    // TODO: Memoize this function.
    $geojson = [
      'type' => 'FeatureCollection',
      'features' => []
    ];

    if (!empty($term->{$geofield})) {
      $geojson['features'] = array_map(
        function ($geofield_value) {
          // NOTE: This is brutal but unfortunately, despite the input format,
          //       Geofield stores geodata as WKT and we need it as GeoJSON.
          $wkt = $geofield_value['geom'];
          $geom = geoPHP::load($wkt, 'wkt');
          // NOTE: Doubly brutal; geoPHP doesn't provide ability to return
          //       intermediate geojson object graph, instead it returns geojson
          //       as a string. We want to pass data to client via
          //       drupal_add_js() 'settings' which does its own js object
          //       encoding. If we passed strings, they would need to be decoded
          //       individually client-side.
          $geojson_geometry = json_decode($geom->out('json'));
          $bbox = $geom->getBBox();
          return [
            "type" => "Feature",
            "geometry" => $geojson_geometry,
            "properties" => ["bbox" => $bbox]
          ];
        },
        $term->{$geofield}[LANGUAGE_NONE]
      );
    }

    return $geojson;
  };
}

/**
 * If the user is only in 1 group set that group as the default and hide the
 * form. The form only get's hidden if the user is not a global OG admin.
 *
 * If a org url query is present set the field to match it. Check if current
 * user is admin or member.
 *
 * @see services_advisor_location_form_service_location_node_form_alter().
 */
function services_advisor_location_og_group_ref_handling(&$form, &$form_state) {
  $group_field = &$form['og_group_ref'][LANGUAGE_NONE][0];
  $group_options = $group_field['default']['#options'];
  $og_admin = user_access('administer group');
  unset($group_options['_none']);

  if (count($group_options) === 1 && $form['nid']['#value'] === NULL) {
    $default_group = key($group_options);
    $group_field['default']['#default_value'] = $default_group;
    $form['og_group_ref']['#access'] = $og_admin;
  }

  $query = drupal_get_query_parameters();
  $query_org = isset($query['org']) ? $query['org'] : NULL;
  $is_member = og_is_member('node', $query_org);

  if ($query_org && ($is_member || $og_admin)) {
    if ($og_admin && !og_is_member('node', $query_org)) {
      $group_field['admin']['#default_value'] = array($query_org);
    } else {
      $group_field['default']['#default_value'] = $query_org;
    }

    $form['og_group_ref']['#access'] = $og_admin;
  }
}

/**
 * Implements hook_node_presave().
 */
function services_advisor_location_node_presave($node) {
  services_advisor_location_title($node);
}

function services_advisor_location_title_runner($nid) {
  if ($node = node_load($nid)) {
    services_advisor_location_title($node);
    node_save($node);
  }
}

function services_advisor_location_title($node) {
  if ($node->type == 'service_location'){
    $title_parts = array();

    if (!empty($node->field_services_provided)) {
      $title_parts['translated_sector']   = i18n_taxonomy_term_name(taxonomy_term_load($node->field_services_provided['und'][0]['tid']), $node->language);
    }

    if (!empty($node->field_service_location_location)) {
      $title_parts['translated_location'] = i18n_taxonomy_term_name(taxonomy_term_load($node->field_service_location_location['und'][0]['tid']), $node->language);
    }

    if (isset($node->tnid)) {
      $title_parts['tnid'] = $node->tnid;
    }

    $node->title = implode(': ', $title_parts);
  }
}

/**
 * Implements hook_field_widget_properties_alter().
 *
 * Adding custom settings for default center and zoom. This is so we can have
 * different defaults per install.
 */
function services_advisor_location_field_widget_properties_alter(&$widget, $context) {
  if ($widget['type'] == 'leaflet_widget_widget') {
    $map_settings = variable_get('services_advisor_location_default_map_settings', array(
      'lat' => 31.95,
      'lng' => 35.583,
      'zoom' => 9
    ));

    $widget['settings']['map']['center']['lat'] = $map_settings['lat'];
    $widget['settings']['map']['center']['lng'] = $map_settings['lng'];
    $widget['settings']['map']['zoom']          = $map_settings['zoom'];
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * Add custom widget javascript and hide geocoder add button.
 */
function services_advisor_location_field_widget_leaflet_widget_widget_form_alter(&$element, &$form_state, $context) {
  if (isset($element['geocoder'])) {
    $element['geocoder']['#attached']['js'][] = drupal_get_path('module', 'services_advisor_location') . '/js/widget.js';
    $element['geocoder']['#description'] = t('Enter an address and click "Save location" to insert it as marker on the map.');
    $element['geocoder']['#field_suffix'] = '<a href="#" class="geocoder-submit button">' . t('Save location') . '</a>';
  }
}

function services_advisor_location_location_date_validate($form, &$form_state) {
  $startdate = $form_state['values']['field_service_start_date'][LANGUAGE_NONE][0]['value'];
  $enddate = $form_state['values']['field_service_end_date'][LANGUAGE_NONE][0]['value'];

  if ($enddate < $startdate) {
    form_set_error('field_service_end_date', t('End Date must be after Start Date.'));
  }
}
