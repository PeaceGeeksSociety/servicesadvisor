<?php
/**
 * @file
 * Code for the services_advisor_base feature.
 */

include_once 'services_advisor_base.features.inc';

/**
 * Implements hook_menu().
 */
function services_advisor_base_menu() {
  $items = array();

  $items['service-strings'] = array(
    'title' => 'Service Strings',
    'page callback' => 'services_advisor_base_service_strings',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE
  );

  $items['admin/config/services-advisor'] = array(
    'title' => 'Service Advisor Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('services_advisor_base_settings_form'),
    'access arguments' => array('administer services advisor settings'),
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function services_advisor_base_menu_alter(&$items) {
  $items['admin/config/people/accounts']['access arguments'] = array('administer users advanced');
  $items['admin/config/people/ip-blocking']['access arguments'] = array('administer users advanced');
}

function services_advisor_base_service_strings() {
  drupal_json_output(array(
    'CATEGORY' => t('Category'),
    'SEARCH_TEXT' => t('To find a service, select from the category or region below. Use the filter button above to further refine your search.'),
    'REGION' => t('Region'),
    'FILTERS' => t('More Filters'),
    'TOGGLE_MAP' => t('Show/Hide Map'),
    'REFERRAL_REQUIRED' => t('Referral Required'),
    'OK' => t('OK'),
    'ORGANIZATIONS' => t('Organizations'),
    'BACK' => t('Back'),
    'SEARCH_RESULTS' => t('Search Results'),
    'HOURS' => t('Hours'),
    'ACTIVITY_DETAILS' => t('Activity Details'),
    'START_DATE' => t('Start Date'),
    'END_DATE' => t('End Date'),
    'REFERRAL_METHOD' => t('Referral Method'),
    'SERVICES_ADVISOR' => t('Services Advisor'),
    'POWERED_BY' => t('Powered by PeaceGeeks'),
    'Ajlun Governorate' => t('Ajlun Governorate'),
    'Al Aqabah Governorate' => t('Al Aqabah Governorate'),
    'Al Balqa Governorate' => t('Al Balqa Governorate'),
    'Al Karak Governorate' => t('Al Karak Governorate'),
    'Al Mafraq Governorate' => t('Al Mafraq Governorate'),
    'Amman Governorate' => t('Amman Governorate'),
    'At Tafilah Governorate' => t('At Tafilah Governorate'),
    'Az Zarqa Governorate' => t('Az Zarqa Governorate'),
    'Irbid Governorate' => t('Irbid Governorate'),
    'Jarash Governorate' => t('Jarash Governorate'),
    'Ma\'an Governorate' => t('Ma\'an Governorate'),
    'Madaba Governorate' => t('Madaba Governorate'),
    'ALL' => t('All'),
    'REFERRAL_NOT_REQUIRED' => t('Referral Not Required'),
    'UNKNOWN' => t('Unknown'),
    'NATIONALITY' => t('Nationality'),
    'INTAKE_CRITERIA' => t('Intake Criteria'),
    'ACCESSIBILITY' => t('Accessibility'),
    'COVERAGE' => t('Coverage'),
    'AVAILABILITY' => t('Availability'),
    'REFERRAL_METHOD' => t('Referral Method'),
    'REFERRAL_NEXT_STEPS' => t('Referral Next Steps'),
    'FEEDBACK_MECHANISM' => t('Feedback Mechanism'),
    'FEEDBACK_DELAY' => t('Feedback Delay'),
    'COMPLAINTS_MECHANISM' => t('Complaints Mechanism')
  ));
}

/**
 * Services Advisor Settings Form.
 *
 * @todo Add hook call so other features can inject their settings.
 */
function services_advisor_base_settings_form($form, &$form_state) {
  $form = array();

  $map_settings = variable_get('services_advisor_location_default_map_settings', array(
    'lat' => 31.95,
    'lng' => 35.583,
    'zoom' => 9
  ));

  $form['services_advisor_location_default_map_settings'] = array(
    '#type' => 'fieldset',
    '#collapsible' => true,
    '#tree' => true,
    '#title' => t('Map Widget Defaults')
  );
  $form['services_advisor_location_default_map_settings']['lat'] = array(
    '#type' => 'textfield',
    '#title' => t('Default Latitude'),
    '#required' => true,
    '#default_value' => $map_settings['lat'],
    '#element_validate' => array('element_validate_number')
  );
  $form['services_advisor_location_default_map_settings']['lng'] = array(
    '#type' => 'textfield',
    '#title' => t('Default Longitude'),
    '#required' => true,
    '#default_value' => $map_settings['lng'],
    '#element_validate' => array('element_validate_number')
  );
  $form['services_advisor_location_default_map_settings']['zoom'] = array(
    '#type' => 'textfield',
    '#title' => t('Default Zoom'),
    '#required' => true,
    '#default_value' => $map_settings['zoom'],
    '#element_validate' => array('element_validate_number')
  );

  return system_settings_form($form);
}

/**
 * Implements hook_permisison().
 */
function services_advisor_base_permission() {
  return array(
    'administer services advisor settings' => array(
      'title' => t('Administer Services Advisor Settings')
    ),
    'administer users advanced' => array(
      'title' => t('Advanced User Administration'),
      'description' => t('Controls access to user administraton pages locationed below "admin/config/people/".')
    )
  );
}
/**
 * Implements hook_block_info().
 */
function services_advisor_base_block_info() {
  $blocks = array();
  $blocks['services_links'] = array(
    'info' => t('Services Links'),
  );
  $blocks['add_service_btn'] = array(
    'info' => t('Add service btn'),
  );
  $blocks['powered_by_peace_geeks'] = array(
    'info' => t('Powered by Peace Geeks'),
  );
  $blocks['site_operator'] = array(
    'info' => t('Site Operator'),
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function services_advisor_base_block_configure($delta = '') {
  $form = array();

  switch ($delta) {
    case 'site_operator':
      // url
      $form['site_operator_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Operator URL'),
        '#description' => t('The operator\'s logo and name will be linked to this URL.'),
        '#default_value' => variable_get('site_operator_url', '')
      );
      // logo
      $form['site_operator_logo_fid'] = array(
        '#type' => 'managed_file',
        '#title' => t('Operator Logo'),
        '#description' => t('The uploaded image will be displayed as the operator logo in the site footer.'),
        '#default_value' => variable_get('site_operator_logo_fid', ''),
        '#size' => 22,
        '#upload_location' => 'public://'
      );
      // name
      $form['site_operator_name'] = array(
        '#type' => 'textfield',
        '#title' => 'Operator Name',
        '#description' => t('The operator\'s name which will be linked along with the logo.'),
        '#default_value' => variable_get('site_operator_name', 'Services Advisor Operator'),
        '#required' => true
      );
      break;
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function services_advisor_base_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'site_operator':
      if ($edit['site_operator_logo_fid']) {
        $old_logo_fid = variable_get('site_operator_logo_fid', 0);

        if ($old_logo_fid && $edit['site_operator_logo_fid'] !== $old_logo_fid) {
          $old_logo = file_load($old_logo_fid);
          file_delete($old_logo, true);
        }

        $logo = file_load($edit['site_operator_logo_fid']);
        // Change status to permanent.
        $logo->status = FILE_STATUS_PERMANENT;
        // Save.
        file_save($logo);

        file_usage_add($logo, 'services_advisor_base', 'site_operator_logo', 1);
        variable_set('site_operator_logo_fid', $logo->fid);
      }

      variable_set('site_operator_url', $edit['site_operator_url']);
      variable_set('site_operator_name', $edit['site_operator_name']);
      break;
  }
}

/**
 * Implements hook_block_view().
 */
function services_advisor_base_block_view($delta='') {
  $block = array();

  switch($delta) {
    case 'services_links' :
      $block['content'] = services_advisor_base_services_links();
      break;
    case 'site_operator' :
      $operator_logo_fid = variable_get('site_operator_logo_fid');
      if ($operator_logo_fid) {
        $logo = file_load($operator_logo_fid);
        $logo_image = theme('image_style', array('style_name' => 'small_logo', 'path' => $logo->uri));
      } else {
        $logo_image = '<img src="/' . drupal_get_path('theme', 'sa2016') .'/images/jordan_inter_agency_clean.png' . '" />';
      }

      $operator_url = variable_get('site_operator_url', 'http://data.unhcr.org/jordan/');
      $operator_name = variable_get('site_operator_name', 'Jordan Inter Agency Coordination');
      $block = array(
        'content' => array(
         '#markup' => '
          <div class="site-operator-inner-wrapper left">
            <a href="' . $operator_url . '">
              <div class="image-wrapper">
                ' . $logo_image . '
              </div>
              <div class="inner-text">' . $operator_name . '</div>
            </a>
          </div>',
       ),
      );
    break;
	  case 'powered_by_peace_geeks' :
		$image_url =  '/'.drupal_get_path('theme', 'sa2016') .'/images/PG_vectors.png';
	  $block = array(
	    'content' => array(
       '#markup' => '<div class="powered-by-wrapper right"><a href="http://peacegeeks.org/"><div class="powered-by-text">'.t('Powered by').'</div><div class="pg-image-wrapper"><img src="'.$image_url.'" /></div><div class="pg-url">peacegeeks.org</a></div></div>',
     ),
	  );
    break;
		case 'add_service_btn':
      $query = array();
      if ($group_context = og_context('node')) {
        $query = array('og_group_ref' => $group_context['gid']);
      }
			$block['content'] = array (
      	'#prefix' => '<div class="clearfix">',
      	'#suffix' => '</div>',
			);
      $block['content']['#markup'] = l('<i class="fi-plus"></i>' . t('Add a new service'), '/node/add/service-location', array(
        'attributes' => array('class' => 'button small alert right radius'),
        'html' => TRUE,
        'query' => $query
      ));
			break;
  }

  return $block;
}

function services_advisor_base_services_links(){
  $node = menu_get_object();
  $variables = array(
    'items' => array(),
    // Leave the title element empty to omit the title.
    'title' => '',
    'type' => 'ul',
    'attributes' => array(),
  );
  $variables['items'][] = l(t('Add a new location'), '/node/add/service-location', array('query' => array('og_group_ref' => $node->nid)));
  return theme('item_list', $variables);
}

/**
 * Alter the access to the ability to clone a given node.
 *
 * @param bool $access
 *   Reference to the boolean determining if cloning should be allowed on a
 *   given node.
 * @param $node
 *   The fully loaded node object being considered for cloning.
 *
 * @see clone_access_cloning()
 * @see drupal_alter()
 */
function services_advisor_base_clone_access_alter(&$access, $node) {
  global $user;

  // Only allow cloning of nodes posted to groups you belong to.
  if ($node->type == 'service_location' && $node->language == 'en' && og_is_member('node', $node->og_group_ref['und'][0]['target_id'])) {
    $access = TRUE;
  }
}

/*
 * Implementation of hook_node_insert()
 */
function services_advisor_base_node_insert($node) {
  if ($node->type == 'service_location' && $node->tnid == 0) {
    $languages = locale_language_list();
    foreach ($languages as $langcode => $language) {

      // Make sure we skip the current language.
      if ($node->language == $langcode) { continue; }

      $node->translation_source = new stdClass();
      $node->translation_source->tnid = $node->nid;

      $clone = clone $node;
      $node->tnid = $node->nid;
      $clone->tnid = $node->nid;

      unset($clone->nid);
      unset($clone->vid);
      unset($clone->title);
      unset($clone->path);

      $clone->language = $langcode;

      node_save($clone);
      // Flag the clone node as needing to be updated, then resave. I can't due this before the initial save.
      $clone->translate = TRUE;
      node_save($clone);
    }

    if ($clone->translate) {
      $message = t('You still need to !link.', array(
        '!link' => l('translate this Service', 'node/' . $node->nid . '/translate')
      ));
      drupal_set_message('<strong>' . $message . '</strong>', 'status');
    }

    $title_queue = DrupalQueue::get('service_location_title_queue');
    $title_queue->createItem($node->nid);
  }
}

function services_advisor_base_views_pre_render(&$view) {
  if ($view->name=='service_location_list') {
    global $language;
    if ($language->language == 'en'){
      return;
    }
    header('location: /?lang=en');
    exit;
  }
}

/**
 * Implements hook_ds_fields_info().
 */
function services_advisor_base_ds_fields_info($entity_type) {
  $fields = array();

  if ($entity_type == 'node') {
    $fields['edit_node'] = array(
      'title' => t('Edit node'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => 'services_advisor_base_render_edit_node',
    );
    $fields['expired_node'] = array(
      'title' => t('Expired node'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => 'services_advisor_base_render_expired_node',
    );
    $fields['node_language'] = array(
      'title' => t('Node Language Completion Status'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => 'services_advisor_base_node_langauge'
    );

    return array('node' => $fields);
  }
}

/**
 * Render the "Edit node" field.
 */
function services_advisor_base_render_edit_node($field) {
  $output = '';
  if (node_access('update', $field['entity'])) {

    $output = l(
      '<span>' . t('Edit Service') . '</span>',
      'node/' . $field['entity']->nid . '/edit',
      array(
        'attributes' => array('class' => array('edit-node round button tiny right alert')),
        'html' => TRUE
      )
    );
  }
  return $output;
}

/**
 * Render the "Expired node" field.
 */
function services_advisor_base_render_expired_node($field) {
  $output = '';
	$expiredvalue = strtotime($field['entity']->field_service_end_date['und'][0]['value']) - time();
	if( (int)$expiredvalue < 0) {
    $output = '<div class="expired-wrapper round  tiny alert"><i class="fi-alert large"></i>'.t('Service is Expired').'</div>';
	} 
	return $output;
}


function services_advisor_base_node_langauge($field) {
  $language_default = language_default();
  $node = $field['entity'];
  $type = variable_get('translation_language_type', LANGUAGE_TYPE_INTERFACE);
  $list = array();

  if (isset($node->tnid) && drupal_multilingual() && $translations = translation_node_get_translations($node->tnid)) {
    foreach (locale_language_list() as $langcode => $language_name) {
      if (isset($translations[$langcode])) {
        $translation_node = node_load($translations[$langcode]->nid);
        $path = 'node/' . $translation_node->nid;
        $links = language_negotiation_get_switch_links($type, $path);
        $list[$langcode] = array(
          'title' => t($language_name),
          '#prefix' => $translation_node->translate ? '<span data-tooltip aria-haspopup="true" class="has-tip" title="Service location needs translation update.">' : '<span data-tooltip aria-haspopup="true" class="has-tip" title="The record translation is complete.">',
          '#suffix' => '</span>',
          'href' => empty($links->links[$langcode]['href']) ? $path : $links->links[$langcode]['href'],
          'language' => $links->links[$langcode]['language'],
          'attributes' => array(
            'class' => $translation_node->translate ? 'round button tiny secondary-alert lang-outdated ' : 'round info button tiny button'
          )
        );
      } else {
        $path = 'node/add/' . str_replace('_', '-', $node->type);
        $links = language_negotiation_get_switch_links($type, $path);

        $list[$langcode] = array(
          'title' => t($language_name),
          '#prefix' => '<span data-tooltip aria-haspopup="true" class="has-tip" title="Service location needs translation update.">',
          '#suffix' => '</span>',
          'href' => empty($links->links[$langcode]['href']) ? $path : $links->links[$langcode]['href'],
          'language' => $links->links[$langcode]['language'],
          'attributes' => array(
            'class' => 'round button tiny secondary-alert lang-outdated '
          ),
          'query' => array(
            'translation' => $node->nid,
            'target' => $langcode
          )
        );
      }
    }
  }

  return theme('links', array('links' => $list));
}