<?php
/**
 * @file
 * Deals with installation, uninstallation and updates
 *
 */

/**
 * Recreate missing translation nodes.
 */
function services_advisor_base_update_7013() {
  $query = db_select('node', 'n')
    ->fields('n', array('tnid'))
    ->condition('n.type', 'service_location')
    ->groupBy('tnid')
    ->having('COUNT(nid) < :langnum', array(':langnum' => count(locale_language_list())));
  $results = $query->execute()->fetchCol();

  foreach (node_load_multiple($results) as $node) {
    foreach(services_advisor_base_get_missing_translations($node) as $missing_lang) {
      services_advisor_base_create_translation_clone($node, $missing_lang);
    }
  }
}

/**
 * Updating service locations to store location lineage as well.
 */
function services_advisor_base_update_7014(&$sandbox) {
  $batch = 50;
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.type', 'service_location');
    // i18n_sync does not run during update hooks so we have to run through
    // translations as well.
    // ->where('n.nid = n.tnid');

  if (!isset($sandbox['max'])) {
    $countQuery = clone $query;
    $sandbox['progress'] = 0;
    $sandbox['max'] = count($countQuery->execute()->fetchCol());
  }

  $results = $query->range($sandbox['progress'], $batch)->execute()->fetchCol();

  foreach(entity_metadata_wrapper('list<node>', $results) as $wrapper) {
    $locations = $wrapper->field_service_location_location->value();
    if (count($locations) === 1) {
      $lineage = array_reverse(taxonomy_get_parents_all($locations[0]->tid));
      $wrapper->field_service_location_location->set($lineage);
      $node = $wrapper->value();
      node_save($node);
    }
    $sandbox['progress']++;
  }

  if (!empty($results) && $sandbox['max'] > 0 && $sandbox['max'] > $sandbox['progress']) {
    $sandbox['#finished'] = $sandbox['progress'] / $sandbox['max'];
  } else {
    $sandbox['#finished'] = 1;
    return t('Updated @count nodes', array('@count' => $sandbox['progress']));
  }
}