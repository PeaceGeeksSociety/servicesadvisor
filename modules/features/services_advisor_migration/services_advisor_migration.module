<?php
/**
 * @file
 * Code for the Services Advisor Migration feature.
 */

include_once 'services_advisor_migration.features.inc';

/**
 * Implements hook_feeds_processor_targets().
 */
function services_advisor_migration_feeds_processor_targets($entity_type, $bundle) {
  $targets = array();
  $field_info_instances = field_info_instances($entity_type, $bundle);

  foreach ($field_info_instances as $field_name => $field_info_instance) {
    $field_info = field_info_field($field_name);

    if ($field_info['type'] == 'office_hours') {
      $targets[$field_name . ':all'] = array(
        'name' => $field_info_instance['label'] . ': All',
        'description' => t('Allows the setting of multiple hour blocks as 1 source field.'),
        'callback' => 'service_advisor_migration_source_office_hours',
        'real_target' => $field_name,
      );
    }
  }

  return $targets;
}

/**
 * Implements hook_feeds_processor_targets_alter().
 */
function services_advisor_migration_feeds_processor_targets_alter(array &$targets, $entity_type, $bundle) {
  // taxonomy_feeds_set_target
  foreach ($targets as $k => &$target) {
    if (isset($target['callback']) && $target['callback'] == 'taxonomy_feeds_set_target') {
      $target['callback'] = 'services_advisor_migration_taxonomy_feeds_set_target';
    }
  }
}

/**
 * Example callback specified in hook_feeds_processor_targets().
 *
 * @param FeedsSource $source
 *   Field mapper source settings.
 * @param object $entity
 *   An entity object, for instance a node object.
 * @param string $target
 *   A string identifying the target on the node.
 * @param array $values
 *   The value to populate the target with.
 * @param array $mapping
 *  Associative array of the mapping settings from the per mapping
 *  configuration form.
 */
function service_advisor_migration_source_office_hours(FeedsSource $source, $entity, $target, array $values, array $mapping) {
  $real_target = str_replace(':all', '', $mapping['target']);
  $lang = $mapping['language'];
  $values = explode(',', $values[0]);
  $hours = array();
  $results = array();

  // Merge Hours and Minutes.
  foreach ($values as $key => $v) {
    if (!($key % 2)) {
      $value = ltrim($v, '0');
    } else {
      $value .= $v;
      $hours[] = $value;
    }
  }

  $dayIndex = 0;
  $dayNumCount = array();

  foreach ($hours as $key => $hour) {
    if (!($key % 2)) {
      // start
      if (!isset($dayNumCount[$dayIndex])) {
        $dayNumCount[$dayIndex] = 1;
      }
      $day['day'] = $dayIndex;
      $day['starthours'] = $hour;
    } else {
      // end
      $day['endhours'] = $hour;

      if ($day['starthours'] !== '') {
        $results[] = $day;
      }

      // If there is no hour value or we already have 2 timeblocks increment the day.
      if ($day['starthours'] === '' || $dayNumCount[$dayIndex] > 1) {
        $dayIndex++;
      } else {
        // Add to counter for each time block of this day.
        $dayNumCount[$dayIndex]++;
      }
    }
  }

  if (!empty($results)) {
    $entity->{$real_target}[$lang] = $results;
  }
}

/**
 * Callback for mapping taxonomy terms.
 */
function services_advisor_migration_taxonomy_feeds_set_target(FeedsSource $source, $entity, $target, array $terms, array $mapping) {
  $language = $mapping['language'];

  // Add in default values.
  $mapping += array(
    'term_search' => FEEDS_TAXONOMY_SEARCH_TERM_NAME,
    'autocreate' => FALSE,
  );

  $info = field_info_field($target);

  $cache = &drupal_static(__FUNCTION__);
  if (!isset($cache['allowed_values'][$target])) {
    $cache['allowed_values'][$target] = taxonomy_allowed_values($info);
  }

  if (!isset($cache['allowed_vocabularies'][$target])) {
    foreach ($info['settings']['allowed_values'] as $tree) {
      if ($vocabulary = taxonomy_vocabulary_machine_name_load($tree['vocabulary'])) {
        $cache['allowed_vocabularies'][$target][$vocabulary->vid] = $vocabulary->machine_name;
      }
    }
  }

  // Some kind of configuration issue. Perhaps the vocabulary was deleted.
  // Nothing we can do about it.
  if (empty($cache['allowed_vocabularies'][$target])) {
    return;
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term')
    ->entityCondition('bundle', $cache['allowed_vocabularies'][$target])
    ->range(0, 1);


  $field = isset($entity->$target) ? $entity->$target : array($language => array());

  if (!isset($field[$language])) {
    $field[$language] = array();
  }

  // Allow for multiple mappings to the same target.
  $delta = count($field[$language]);

  // Iterate over all values.
  foreach ($terms as $term) {

    if ($info['cardinality'] == $delta) {
      break;
    }

    $tid = FALSE;

    // FeedsTermElement already is a term.
    if ($term instanceof FeedsTermElement) {
      $tid = $term->tid;
    }
    else {
      switch ($mapping['term_search']) {

        // Lookup by name.
        case FEEDS_TAXONOMY_SEARCH_TERM_NAME:
          $term = trim($term);
          $name_query = clone $query;
          if (strlen($term) && $tids = $name_query->propertyCondition('name', $term)->execute()) {

            // Find the first allowed term.
            foreach ($tids['taxonomy_term'] as $possible_term) {
              if (isset($cache['allowed_values'][$target][$possible_term->tid])) {
                $tid = $possible_term->tid;
                break;
              }
            }
          }
          elseif (!$mapping['autocreate'] && strlen($term)) {
            $source->log('services_advisor_migration', 'Term value %termname not found for field %field', array('%termname' => $term, '%field' => $target), WATCHDOG_WARNING);
          }
          elseif ($mapping['autocreate'] && strlen($term)) {
            $term = (object) array(
              'name' => drupal_substr($term, 0, 255),
              'vid' => key($cache['allowed_vocabularies'][$target]),
              'vocabulary_machine_name' => reset($cache['allowed_vocabularies'][$target]),
            );
            // Set language if the taxonomy is multilingual.
            if ($language !== LANGUAGE_NONE) {
              $info = entity_get_info('taxonomy_term');
              if (!empty($info['entity keys']['language'])) {
                $term->{$info['entity keys']['language']} = $language;
              }
            }
            taxonomy_term_save($term);
            $tid = $term->tid;
            // Add to the list of allowed values.
            $cache['allowed_values'][$target][$tid] = $term->name;
          }
          break;

        // Lookup by tid.
        case FEEDS_TAXONOMY_SEARCH_TERM_ID:
          if (is_numeric($term)) {
            $tid = (int) $term;
          }
          break;

        // Lookup by GUID.
        case FEEDS_TAXONOMY_SEARCH_TERM_GUID:
          $tid = taxonomy_feeds_term_lookup_term_by_guid($term);
          break;
      }
    }

    if ($tid && isset($cache['allowed_values'][$target][$tid])) {
      $field[$language][] = array('tid' => $tid);
      $delta++;
    }
  }

  $entity->$target = $field;
}
